import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { getNotificationSupport, isIOS, getIOSVersion, isStandalone } from '@/utils/deviceDetection';
export const IOSDebugPanel = () => {
  const [debugInfo, setDebugInfo] = useState<any>({});
  const [testResult, setTestResult] = useState<string>('');
  useEffect(() => {
    collectDebugInfo();
  }, []);
  const collectDebugInfo = () => {
    const support = getNotificationSupport();
    const info = {
      // Detec√ß√£o b√°sica
      userAgent: navigator.userAgent,
      platform: navigator.platform,
      isIOSDetected: isIOS(),
      iosVersion: getIOSVersion(),
      isStandalone: isStandalone(),
      // Suporte a notifica√ß√µes
      notificationInWindow: 'Notification' in window,
      notificationPermission: typeof Notification !== 'undefined' ? Notification.permission : 'n√£o dispon√≠vel',
      serviceWorkerSupported: 'serviceWorker' in navigator,
      pushManagerSupported: 'PushManager' in window,
      // Detec√ß√£o do nosso sistema
      supportDetection: support,
      // Configura√ß√µes do Safari
      cookiesEnabled: navigator.cookieEnabled,
      doNotTrack: navigator.doNotTrack,
      language: navigator.language,
      // Protocolo
      protocol: window.location.protocol,
      isHTTPS: window.location.protocol === 'https:',
      // Modo privado (tentativa de detec√ß√£o)
      mightBePrivateMode: false
    };

    // Tentar detectar modo privado
    try {
      localStorage.setItem('test', 'test');
      localStorage.removeItem('test');
    } catch (e) {
      info.mightBePrivateMode = true;
    }
    setDebugInfo(info);
  };
  const testNotificationDirect = async () => {
    setTestResult('Testando...');
    try {
      // Teste 1: Verificar se Notification existe
      if (!('Notification' in window)) {
        setTestResult('‚ùå Notification API n√£o est√° dispon√≠vel neste navegador');
        return;
      }

      // Teste 2: Verificar permiss√£o atual
      setTestResult('üîî Verificando permiss√£o atual...');
      console.log('Permiss√£o atual:', Notification.permission);

      // Teste 3: Solicitar permiss√£o
      if (Notification.permission === 'default') {
        setTestResult('üîî Solicitando permiss√£o...');
        const permission = await Notification.requestPermission();
        console.log('Resultado da permiss√£o:', permission);
        if (permission === 'granted') {
          setTestResult('‚úÖ Permiss√£o concedida! Testando notifica√ß√£o...');

          // Teste 4: Criar notifica√ß√£o
          try {
            const notification = new Notification('üß™ Teste iOS 18', {
              body: 'Se voc√™ viu esta notifica√ß√£o, est√° funcionando!',
              icon: '/favicon.ico',
              tag: 'ios-test'
            });
            setTestResult('‚úÖ Notifica√ß√£o criada com sucesso! Verifique se apareceu.');
            setTimeout(() => {
              notification.close();
            }, 5000);
          } catch (notifError) {
            setTestResult(`‚ùå Erro ao criar notifica√ß√£o: ${notifError.message}`);
          }
        } else {
          setTestResult(`‚ùå Permiss√£o negada: ${permission}`);
        }
      } else if (Notification.permission === 'granted') {
        setTestResult('‚úÖ Permiss√£o j√° concedida! Testando notifica√ß√£o...');
        try {
          const notification = new Notification('üß™ Teste iOS 18 (j√° permitido)', {
            body: 'Testando notifica√ß√£o com permiss√£o j√° concedida',
            icon: '/favicon.ico'
          });
          setTestResult('‚úÖ Notifica√ß√£o criada! Se apareceu, est√° funcionando.');
          setTimeout(() => {
            notification.close();
          }, 5000);
        } catch (notifError) {
          setTestResult(`‚ùå Erro ao criar notifica√ß√£o: ${notifError.message}`);
        }
      } else {
        setTestResult(`‚ùå Permiss√£o bloqueada: ${Notification.permission}`);
      }
    } catch (error) {
      setTestResult(`‚ùå Erro geral: ${error.message}`);
      console.error('Erro no teste:', error);
    }
  };
  const resetPermissions = () => {
    setTestResult('‚ÑπÔ∏è Para resetar permiss√µes: Safari ‚Üí Configura√ß√µes ‚Üí Privacidade e Seguran√ßa ‚Üí Notifica√ß√µes ‚Üí Remover este site');
  };
  if (!isIOS()) {
    return <Card className="m-4">
        
        
      </Card>;
  }
  return <Card className="m-4">
      <CardHeader>
        <CardTitle>üß™ Debug iOS 18 - Diagn√≥stico Completo</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        
        {/* Informa√ß√µes B√°sicas */}
        <div>
          <h3 className="font-medium mb-2">üì± Detec√ß√£o de Dispositivo:</h3>
          <div className="space-y-1 text-sm">
            <div>iOS Detectado: <Badge>{debugInfo.isIOSDetected ? 'Sim' : 'N√£o'}</Badge></div>
            <div>Vers√£o iOS: <Badge>{debugInfo.iosVersion || 'N√£o detectada'}</Badge></div>
            <div>Modo Standalone (PWA): <Badge>{debugInfo.isStandalone ? 'Sim' : 'N√£o'}</Badge></div>
            <div>Protocolo: <Badge variant={debugInfo.isHTTPS ? 'default' : 'destructive'}>{debugInfo.protocol}</Badge></div>
            <div>Poss√≠vel modo privado: <Badge variant={debugInfo.mightBePrivateMode ? 'destructive' : 'default'}>{debugInfo.mightBePrivateMode ? 'Sim' : 'N√£o'}</Badge></div>
          </div>
        </div>

        {/* Suporte a APIs */}
        <div>
          <h3 className="font-medium mb-2">üîß Suporte a APIs:</h3>
          <div className="space-y-1 text-sm">
            <div>Notification API: <Badge variant={debugInfo.notificationInWindow ? 'default' : 'destructive'}>{debugInfo.notificationInWindow ? 'Dispon√≠vel' : 'N√£o dispon√≠vel'}</Badge></div>
            <div>Permiss√£o atual: <Badge>{debugInfo.notificationPermission}</Badge></div>
            <div>Service Worker: <Badge variant={debugInfo.serviceWorkerSupported ? 'default' : 'destructive'}>{debugInfo.serviceWorkerSupported ? 'Suportado' : 'N√£o suportado'}</Badge></div>
            <div>Push Manager: <Badge variant={debugInfo.pushManagerSupported ? 'default' : 'destructive'}>{debugInfo.pushManagerSupported ? 'Dispon√≠vel' : 'N√£o dispon√≠vel'}</Badge></div>
          </div>
        </div>

        {/* Nossa Detec√ß√£o */}
        <div>
          <h3 className="font-medium mb-2">üéØ Nossa Detec√ß√£o:</h3>
          <div className="space-y-1 text-sm">
            <div>Plataforma: <Badge>{debugInfo.supportDetection?.platform}</Badge></div>
            <div>Suportado: <Badge variant={debugInfo.supportDetection?.supported ? 'default' : 'destructive'}>{debugInfo.supportDetection?.supported ? 'Sim' : 'N√£o'}</Badge></div>
            <div>N√≠vel: <Badge>{debugInfo.supportDetection?.level}</Badge></div>
            <div className="text-xs text-gray-600">{debugInfo.supportDetection?.message}</div>
          </div>
        </div>

        {/* User Agent */}
        <div>
          <h3 className="font-medium mb-2">üîç User Agent:</h3>
          <div className="text-xs bg-gray-100 p-2 rounded break-all">
            {debugInfo.userAgent}
          </div>
        </div>

        {/* Testes */}
        <div className="space-y-2">
          <h3 className="font-medium">üß™ Testes:</h3>
          <div className="flex gap-2">
            <Button onClick={testNotificationDirect} size="sm">
              Testar Notifica√ß√£o Direta
            </Button>
            <Button onClick={resetPermissions} variant="outline" size="sm">
              Como Resetar Permiss√µes
            </Button>
            <Button onClick={collectDebugInfo} variant="outline" size="sm">
              Atualizar Info
            </Button>
          </div>
          {testResult && <div className="text-sm p-2 bg-blue-50 rounded">
              {testResult}
            </div>}
        </div>

        {/* Instru√ß√µes */}
        <div className="bg-yellow-50 p-3 rounded text-sm">
          <h4 className="font-medium text-yellow-800">üí° Poss√≠veis Problemas no iOS:</h4>
          <ul className="list-disc list-inside text-yellow-700 mt-1 space-y-1">
            <li>Navega√ß√£o em modo privado (notifica√ß√µes bloqueadas)</li>
            <li>Configura√ß√µes do Safari bloqueando notifica√ß√µes</li>
            <li>Site precisa estar em HTTPS</li>
            <li>Permiss√µes foram negadas anteriormente</li>
            <li>Configura√ß√µes de "N√£o Perturbe" ativas</li>
          </ul>
        </div>

      </CardContent>
    </Card>;
};